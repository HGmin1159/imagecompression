plot(load.image(input$file))
)
}
shinyApp(ui=ui,server=server)
library(shiny)
library(imager)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file", label = h3("Image input"))
),
mainPanel(
plotOutput('image')
),
)
)
server <- function(input,output){
output$image = renderImage(
plot(load.image(input$file$datapath))
)
}
shinyApp(ui=ui,server=server)
library(shiny)
library(imager)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file", label = h3("Image input"))
),
mainPanel(
plotOutput('image')
),
)
)
server <- function(input,output){
output$image = renderImage(
plot(load.image((input$file)$datapath))
)
}
shinyApp(ui=ui,server=server)
library(shiny)
library(imager)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file", label = h3("Image input"))
),
mainPanel(
plotOutput('image')
),
)
)
server <- function(input,output){
output$image = renderImage(
plot(load.image(str(input$file)$datapath))
)
}
shinyApp(ui=ui,server=server)
library(shiny)
library(imager)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file", label = h3("Image input"))
),
mainPanel(
plotOutput('image')
),
)
)
server <- function(input,output){
output$image = renderImage(
plot(load.image(str(str(input$file)$datapath)))
)
}
shinyApp(ui=ui,server=server)
library(shiny)
library(imager)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file", label = h3("Image input"))
),
mainPanel(
plotOutput('image')
),
)
)
server <- function(input,output){
output$image = renderText(
str(str(input$file)$datapath)
)
}
shinyApp(ui=ui,server=server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source(helper)
source("helper.R"")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", label = h3("Image input"))
),
mainPanel(
plotOutput('image')
),
)
)
server <- function(input,output){
myjpg = load.image(input$file1$datapath)
output$image = renderPlot(
plot(load.image(input$file1$datapath))
)
}
shinyApp(ui=ui,server=server)
source("helper.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?seq
runApp()
runApp()
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
?fileInput
fileInput("file1", label = h3("Image input"),),
sliderInput("slider1", label = h3("Percent Range"), min = 1,
max = 100, value = c(1,100)),
selectInput("select", label = h3("Number of plot"),
choices = list("3", "6", "9"),
selected = "3"),
fluidRow(
column(3,
checkboxGroupInput("checkGroup", label = h3("color"),
choices = list("red" = 1, "blue" = 2, "green" = 3),
selected = c(1,2,3))
),
column(4),
column(3,
br(),
br(),
br(),
br(),
actionButton("action", label = "plotting")
))
),
mainPanel(
plotOutput('image')
)
)
)
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?seq
runApp()
reduntion(myjpg)
reduction(myjpg)
myjpg = load.image("Nirvana.jpg")
reduction(myjpg)
myjpg = load.image("Nirvana.jpg")
reduction(myjpg)
reduction = function(myjpg,grid=6,interval=c(1,100),color){
try({nirvana = as.array(myjpg)})
red = nirvana[,,1,1]
blue = nirvana[,,1,2]
green = nirvana[,,1,3]
reds = svd(red)
redd = diag(reds$d)
redu = reds$u
redv = reds$v
#red = u d v' 로 singural value decomposition
blues = svd(blue)
blued = diag(blues$d)
blueu = blues$u
bluev = blues$v
greens = svd(green)
greend = diag(greens$d)
greenu = greens$u
greenv = greens$v
reduction1 = function(i){
somedata=rep(1,3*639*640)
result = array(somedata,dim=c(dim(red)[1],dim(red)[2],1,3))
r = trunc(min(dim(red)[1],dim(red)[2])*i)
result[,,1,1] = redu[,1:r] %*% redd[1:r,1:r] %*% t(redv[,1:r])
result[,,1,2] = blueu[,1:r] %*% blued[1:r,1:r] %*% t(bluev[,1:r])
result[,,1,3] = greenu[,1:r] %*% greend[1:r,1:r] %*% t(greenv[,1:r])
result[result<0]=0
result[result>1]=1
return(result)
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
}
myjpg = load.image("Nirvana.jpg")
reduction(myjpg)
reduction = function(myjpg,grid=6,interval=c(1,100),color){
try({nirvana = as.array(myjpg)})
red = nirvana[,,1,1]
blue = nirvana[,,1,2]
green = nirvana[,,1,3]
reds = svd(red)
redd = diag(reds$d)
redu = reds$u
redv = reds$v
#red = u d v' 로 singural value decomposition
blues = svd(blue)
blued = diag(blues$d)
blueu = blues$u
bluev = blues$v
greens = svd(green)
greend = diag(greens$d)
greenu = greens$u
greenv = greens$v
reduction1 = function(i){
somedata=rep(1,3*dim(red)[1]*dim(red)[2])
result = array(somedata,dim=c(dim(red)[1],dim(red)[2],1,3))
r = trunc(min(dim(red)[1],dim(red)[2])*i)
result[,,1,1] = redu[,1:r] %*% redd[1:r,1:r] %*% t(redv[,1:r])
result[,,1,2] = blueu[,1:r] %*% blued[1:r,1:r] %*% t(bluev[,1:r])
result[,,1,3] = greenu[,1:r] %*% greend[1:r,1:r] %*% t(greenv[,1:r])
result[result<0]=0
result[result>1]=1
return(result)
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
}
myjpg = load.image("Nirvana.jpg")
reduction(myjpg)
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
interval=c(1,100)
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
interval[2]
seq(interval[2],interval[1],length.out=grid)
grid=6
seq(interval[2],interval[1],length.out=grid)
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
}
reduction1 = function(i){
somedata=rep(1,3*dim(red)[1]*dim(red)[2])
result = array(somedata,dim=c(dim(red)[1],dim(red)[2],1,3))
r = trunc(min(dim(red)[1],dim(red)[2])*i)
result[,,1,1] = redu[,1:r] %*% redd[1:r,1:r] %*% t(redv[,1:r])
result[,,1,2] = blueu[,1:r] %*% blued[1:r,1:r] %*% t(bluev[,1:r])
result[,,1,3] = greenu[,1:r] %*% greend[1:r,1:r] %*% t(greenv[,1:r])
result[result<0]=0
result[result>1]=1
return(result)
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
red = nirvana[,,1,1]
blue = nirvana[,,1,2]
green = nirvana[,,1,3]
reds = svd(red)
redd = diag(reds$d)
redu = reds$u
redv = reds$v
#red = u d v' 로 singural value decomposition
blues = svd(blue)
blued = diag(blues$d)
blueu = blues$u
bluev = blues$v
greens = svd(green)
greend = diag(greens$d)
greenu = greens$u
greenv = greens$v
try({nirvana = as.array(myjpg)})
red = nirvana[,,1,1]
blue = nirvana[,,1,2]
green = nirvana[,,1,3]
reds = svd(red)
redd = diag(reds$d)
redu = reds$u
redv = reds$v
#red = u d v' 로 singural value decomposition
blues = svd(blue)
blued = diag(blues$d)
blueu = blues$u
bluev = blues$v
greens = svd(green)
greend = diag(greens$d)
greenu = greens$u
greenv = greens$v
reduction1 = function(i){
somedata=rep(1,3*dim(red)[1]*dim(red)[2])
result = array(somedata,dim=c(dim(red)[1],dim(red)[2],1,3))
r = trunc(min(dim(red)[1],dim(red)[2])*i)
result[,,1,1] = redu[,1:r] %*% redd[1:r,1:r] %*% t(redv[,1:r])
result[,,1,2] = blueu[,1:r] %*% blued[1:r,1:r] %*% t(bluev[,1:r])
result[,,1,3] = greenu[,1:r] %*% greend[1:r,1:r] %*% t(greenv[,1:r])
result[result<0]=0
result[result>1]=1
return(result)
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
try({nirvana = as.array(myjpg)})
red = nirvana[,,1,1]
blue = nirvana[,,1,2]
green = nirvana[,,1,3]
reds = svd(red)
redd = diag(reds$d)
redu = reds$u
redv = reds$v
#red = u d v' 로 singural value decomposition
blues = svd(blue)
blued = diag(blues$d)
blueu = blues$u
bluev = blues$v
greens = svd(green)
greend = diag(greens$d)
greenu = greens$u
greenv = greens$v
reduction1 = function(i){
somedata=rep(1,3*dim(red)[1]*dim(red)[2])
result = array(somedata,dim=c(dim(red)[1],dim(red)[2],1,3))
r = trunc(min(dim(red)[1],dim(red)[2])*i)
result[,,1,1] = redu[,1:r] %*% redd[1:r,1:r] %*% t(redv[,1:r])
result[,,1,2] = blueu[,1:r] %*% blued[1:r,1:r] %*% t(bluev[,1:r])
result[,,1,3] = greenu[,1:r] %*% greend[1:r,1:r] %*% t(greenv[,1:r])
result[result<0]=0
result[result>1]=1
return(result)
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = seq(interval[2],interval[1],length.out=grid)/100
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
seq(interval[2],interval[1],length.out=grid)/100[,]
seq(interval[2],interval[1],length.out=grid)/100
seq(interval[2],interval[1],length.out=grid)[2:]
seq(interval[2],interval[1],length.out=grid)[-1]
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = c(100,
seq(interval[2],interval[1],length.out=grid)[-1]/100)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
par(mfrow=c(grid/3,3),xaxt="n",yaxt="n")
blurindex = c(1,
seq(interval[2],interval[1],length.out=grid)[-1]/100)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
interval = c(1,50)
blurindex = c(1,
seq(interval[2],interval[1],length.out=grid)[-1]/100)
for (i in blurindex){
plot(as.cimg(reduction1(i)),main=paste(i*100,"%   use"))
}
runApp()
?sidebarPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
somedata=rep(1,3*dim(red)[1]*dim(red)[2])
result = array(somedata,dim=c(dim(red)[1],dim(red)[2],1,3))
r = trunc(min(dim(red)[1],dim(red)[2])*i)
result[,,1,1] = redu[,1:r] %*% redd[1:r,1:r] %*% t(redv[,1:r])
result[,,1,2] = blueu[,1:r] %*% blued[1:r,1:r] %*% t(bluev[,1:r])
result[,,1,3] = greenu[,1:r] %*% greend[1:r,1:r] %*% t(greenv[,1:r])
result[result<0]=0
result[result>1]=1
return(result)
result[,,1,-color]
color=c(1,2,3)
result[,,1,-color]
result[,,1,-c(1)]
sum(result[,,1,-c(1)]==result[,,1,c(2,3)])
sum(result[,,1,-c(1)]!=result[,,1,c(2,3)])
result[,,1,-color]=0
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 3: tabsets
shinyAppDir(
system.file("https://github.com/HGmin1159/image_compression/app.R", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
shinyAppDir(
shinyAppDir()
?shinyAppdir
system.file("https://github.com/HGmin1159/image_compression", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
shinyAppDir(
shinyAppDir()
?shinyAppDir
system.file("https://github.com/HGmin1159/image_compression", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
?shinyAppDir
runGitHub( "image_compression", "hgm1159")
library(shiny)
runGitHub( "image_compression", "hgm1159")
library(shiny)
runGitHub( "image_compression", "hgm1159")
library(shiny)
runGitHub( "image_compression", "HGmin1159")
?runGitHub
runGitHub("HGmin1159/image_compression")
library(shiny)
runGitHub("HGmin1159/image_compression")
runGitHub("HGmin1159/image_compression/app.R")
runGitHub("shiny_example", "rstudio")
runGitHub("image_compression","HGmin1159")
runGitHub("image_compression","HGmin1159")
